{"data":{"site":{"siteMetadata":{"title":"Blog by Valerii Maltsev","subtitle":"\n      all(identity, [Write JavaScript, share knowladge, develop web applications])\n    ","copyright":"","author":{"name":"Valerii Maltsev","twitter":"valeriimaltsev"},"disqusShortname":"","url":"https://proginmind.io"}},"markdownRemark":{"id":"98ac5c71-b308-561e-8b60-db2cc23710bd","html":"<p>It was interesting to me how to implement “Sign in with …” button. When this button\nclicked new popup appears and takes care of auth flow. When I implemented that feature\nI decided to introduce solution to the people like one of the possible way to achieve that.</p>\n<p>In general there is two main paths:</p>\n<ol>\n<li>opening popup with correct url</li>\n<li>closing popup and read results of the auth flow</li>\n</ol>\n<p>Lets do it step by step</p>\n<h4>Prerequesites</h4>\n<p><a href=\"https://en.wikipedia.org/wiki/JavaScript\">JavaScript</a>\n<a href=\"https://hackernoon.com/understanding-async-await-in-javascript-1d81bb079b2c\">async/await</a></p>\n<h3>Opening popup</h3>\n<p>Except new window, there are other containers where you can do that auth flow:</p>\n<ul>\n<li>new tab of the browser</li>\n<li>iframe</li>\n</ul>\n<p>For the current example lets take a look at new window popup as a auth flow container.</p>\n<p>There is widely known way to open a popup.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> popup <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>url<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>name<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>settingstring<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note that <code class=\"language-text\">open()</code> function have to be called synchronously, in other words directly\nin user action listener function. In other case, if you decided to call it asynchronously,\nbrowsers block such popups.</p>\n<p>For example the simplest click handler will be fine:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">signIn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ...</span>\n\t<span class=\"token keyword\">const</span> poppup <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Url</h3>\n<p>Every third party OAuth API provides documentation of how to construct correct url for\nauth flow. One of the main query parameter should be called like <code class=\"language-text\">redrect_uri</code>.\n<a href=\"https://developers.google.com/identity/protocols/OAuth2UserAgent\">There</a> is google’s OAuth flow url parameters documented.\nCheck Step 2 -> OAuth Endpoints tab.</p>\n<p>So url for the newly opened popup can be like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> popup <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`https://accounts.google.com/o/oauth2/v2/auth?</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>queryParamsString<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>where <code class=\"language-text\">queryParamsString</code> is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const queryParamsString = &#39;&#39; +\n&#39;client_id={id}&amp;&#39; +\n&#39;redirect_uri={our web app or server API url}&amp;&#39; +\n&#39;response_type=token&amp;&#39; +\n&#39;scope=admin&#39;</code></pre></div>\n<p>Sometimes url for that popup have to be calculated on API side and you as a frontend developer\nhave to retreive it first in order to use in your popup. In that case we can always open\npopup synchronously with blank <url> argument, then load our <code class=\"language-text\">redirect_url</code> from the API and\nset it to our popup using <code class=\"language-text\">location</code> window’s API. Just like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> clickHandler <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> popup <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  popup<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> url<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That will redirect our popup window to the required url. After that action we can’t control\npopup behavior any more, except actions like closing that we are not interesting in yet.</p>\n<h3>Checking popup state</h3>\n<p>After redurecting popup to the url with different host from our’s, we should start process of\ncontinuous checking popup’s <code class=\"language-text\">location.href</code>. You may notice that trying to read that field\nthrows error about restricted access to that field. It is ok, do not try to fix that!\nInstead we should wrap that field access to <code class=\"language-text\">try/catch</code> block.\nOn that point we need to use setTimeout() with callback that checks location of the popup.\nWhen you start to have access to<code class=\"language-text\">href</code> field and it is one of <code class=\"language-text\">sucess_url</code> or <code class=\"language-text\">error_url</code> we can\nclose popup with <code class=\"language-text\">popup.close()</code> and set according result to our app.</p>\n<p>There is some pseudo code for that implementation:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const clickHandler = async () =&gt; {\n  const popup = window.open(&#39;&#39;, null, &#39;&#39;);\n  const url = await getUrl();\n  popup.location.href = url;\n  const result = await checkPopup(popup);\n  setState({ authSuccessful: result });\n}\n\nconst checkPopup = (popup) =&gt; {\n  const href = () =&gt; popup.location.href;\n  return new Promise(resolve =&gt; {\n    const interval = setInterval(() =&gt; {\n      let currentHref; \n      try {\n        currentHref = href(popup);\n      } catch () {\n        // popup doesn&#39;t have success or error href\n      }\n      const isSuccess = currentHref === &#39;success_url&#39;;\n      const isHrefValid = isSuccess || currentHref === &#39;error_url&#39;;\n      if (isHrefValid){\n        clearInterval(interval);\n        resolve(isSuccess);\n      }\n    }, 1000);  \n  });\n}</code></pre></div>\n<h3>And that’s it!</h3>\n<p>Lets review our steps:</p>\n<ol>\n<li>open popup synchronously on user action</li>\n<li>get popup url either synchronously or asynchronously</li>\n<li>set popup.location.href to obtained url</li>\n<li>start popup checking</li>\n<li>wait when popup will be redirected back to success or error urls and we can read them</li>\n<li>close popup</li>\n<li>check the result</li>\n</ol>","fields":{"tagSlugs":["/tags/javascript/","/tags/web/"]},"frontmatter":{"title":"Auth Popup","tags":["Javascript","Web"],"date":"2019-01-03T16:51:00.000Z","description":"How to implement popup for authorization third party APIs"}}},"pageContext":{"slug":"/posts/integration-popup-implementation/"}}