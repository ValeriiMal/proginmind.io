{"data":{"site":{"siteMetadata":{"title":"Blog by Valerii Maltsev","subtitle":"\n      all(identity, [Write JavaScript, share knowladge, develop web applications])\n    ","copyright":"","author":{"name":"Valerii Maltsev","twitter":"valeriimaltsev"},"disqusShortname":"","url":"https://proginmind.io"}},"markdownRemark":{"id":"ccc2da14-c2ad-5d85-b6e7-ad8becbfcd57","html":"<p>This article is just my thoughts on how I’m thinking about layering and how to apply it on different\nlevels of the app. Maybe this help can help you to decide where it is applicable during your work routine.</p>\n<p>I found it interesting to think about layered architecture not only in scope of high level architecure view\nbut also in low level project entities.\nSo that layering in one hand is about “divide and concuer” (DC) principle that naturally produces Single Responsibility and\nSeparation Of Concerns principles. And it is also about standartization on the other hand.\nFor me it is natural to think about almost everythig (in programming world) as of something that can be devided\ninto smaller pieces.\nI found it exhausted to read articles about patterns, functional programming approaches, different architectures,\ntime management and event human productivity because they often are all partial application of DC law.\nYou can think about almost all parts of life or working process like about something\nthat can be divided into smaller parts. Leyering is also about that.</p>\n<p>But there is a small defference between terms like “layering” and “decomposition” in programming.\n“layering” means something standartaized, something that you expect to see in defferent levels of the application.\nOn the other hand, “decomposition” means more general approach to programming where you trying to extract reusable pieces of functionality.</p>\n<p>For example take into consideration standard pattern for frontend applications: MVC.\nIt can be shown like unidirectional data flow:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MODEL -&gt; VIEW -&gt; CONTROLLER</code></pre></div>\n<p>There are three basic layers that you can find in all frontend web applications. <code class=\"language-text\">VIEW</code> can be exposed using\nUI library of framework. <code class=\"language-text\">CONTROLLER</code> is an object or function with state that handles\nevents from <code class=\"language-text\">VIEW</code> and transport data to <code class=\"language-text\">VIEW</code>. <code class=\"language-text\">MODEL</code> is something that has ability to store\npersistent info or state about the application. In React apps that can be app store implemented\nwith Redux or using Context Api. In Angular apps that can be Service instance that share its\nstate between different modules. But this is only implementations that bring the same idea.</p>\n<p>Then we can also find this kind of architecture in a higher level. Leyering can be expressed\nthrough this chain:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CLIENT -&gt; SERVER -&gt; DATABASE</code></pre></div>\n<p>Something similar to what we have just seen. Three layers.\nEach layer has one responsibility. You can also mention that each of this layers can also be\ndivided to more layers with smaller granularity. For example <code class=\"language-text\">SERVER</code> layer is often divided\nto <code class=\"language-text\">VIEW</code> layer that exposes data that can be sent to client, <code class=\"language-text\">CONTROLLER</code> that manipulates data from\nrequest and who knows how to deal with database. <code class=\"language-text\">DATABASE</code> also is divided: tables is the exact\ndata and there is another leyer that can manipulate data. Usually this is transactions, triggers,\nstored procedures and so on.</p>\n<p>But I’m mostly work with frontend codebase and I found it very useful think about leyering before\nstarting to work on something new or maybe if I need to change something that begin to be hard\nto change or extend.</p>\n<p>If you are a React user, you can see the layering of the framework every day. I’m talking about\n<code class=\"language-text\">react</code> and <code class=\"language-text\">react-dom</code> packages. <code class=\"language-text\">react</code> package knows how to deal with React components, how to\ncalculate changes in them and that’s all at most part. <code class=\"language-text\">react-dom</code> package knows how to apply\nchanges produced by <code class=\"language-text\">react</code> to the dedicated platform (in this case browser DOM) and that’s all.</p>\n<p>The same thing we can find in <code class=\"language-text\">react-dnd</code> pachage as well. There we have <code class=\"language-text\">react-dnd</code> package that\nknows how to calculate state of the drag-n-drop process in the app. And there we have other\npackages like <code class=\"language-text\">react-dnd-html5-backend</code> or <code class=\"language-text\">react-dnd-touch-backend</code>. This packages know how to\napply state produced be <code class=\"language-text\">react-dnd</code> to the dedicated platform.</p>\n<p>As you see layering is a great thing that can split abstract API that user deals with from\nimplementation details of different platforms.</p>\n<p>Lets consider simple form. Forms in application can be very different but we can standartize approach of how to handle it.\nAll forms need UI. UI can be considerend like one of the layers that recieve value and expose function that triggers on form change.\nIf UI does not have a persistent state to store value it is obviously that we need some place to store it.\nAgain, this is implementation details of how to implement such state store.\nReact can use context API or Redux store or local state of component.\nAngular users can use dedicated service or component’s state.\nAlmost all forms need validation. And this is a good point to have third layer.\nWe can call it <code class=\"language-text\">VALIDATION</code> layer and it can be implemented in a reusable and standard way in the application.\n<code class=\"language-text\">VALIDATION</code> should lie between form UI and value state.\nIt means it should receive form value and produce error object for form value and either changed form value due to business rules or not changed form value.\nBetter to keep this error object in the state near the form value so it is easy to find and change.\nLets visualize what we have for now.\nThere is three layers:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 STATE -&gt; 2 UI -&gt; (change) -&gt; 3 VALIDATION -&gt; 1 STATE</code></pre></div>\n<p>The question can be where to apply this <code class=\"language-text\">VALIDATION</code> layer. So there is no correct answer.\nBut it is important to keep validators in the same place for every form.\nFor example lets keep it between form controller and state.\nReact users can consider to use higher order components to apply validators.\nRedux users can consider to user middlewares.\nAngular users can consider to use service or component class.</p>\n<p>If you will keep things like that it will be easier to reason about where to find bugs,\nwhere to change validation logic, where to change form value business logic etc.\nIt is great to have little standards for your app so everyone knows what to expect in defferent places of the app.</p>\n<p>Here is a few lines of code to bring some visualization here. I’m using React for examples because it need less code.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// UI layer</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Form</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">,</span> onChange<span class=\"token punctuation\">,</span> onSubmit <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>error <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Error message here<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onChange<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button type<span class=\"token operator\">=</span><span class=\"token string\">\"submit\"</span><span class=\"token operator\">></span>Submit<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// VALIDATION layer</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withError</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Wrapped<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> onError<span class=\"token punctuation\">,</span> onChange<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>props <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onChange</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> validatedData <span class=\"token operator\">=</span> <span class=\"token function\">validate</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>validatedData<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>validatedData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Wrapped <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> Component<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> UiWithErrorHandling <span class=\"token operator\">=</span> <span class=\"token function\">withError</span><span class=\"token punctuation\">(</span>Ui<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// STATE layer</span>\ncons initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> action<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">StateContainer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleChange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleError</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>validationData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> validationData <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>UiWithErrorHandling\n      value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span>\n      error<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">}</span>\n      onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleChange<span class=\"token punctuation\">}</span>\n      onError<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleError<span class=\"token punctuation\">}</span>\n      onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>handleSubmit<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","fields":{"tagSlugs":["/tags/javascript/","/tags/web/","/tags/architecture/"]},"frontmatter":{"title":"It's all about layering","tags":["Javascript","Web","Architecture"],"date":null,"description":"How to think about layered architecture","twitter":"","github":"https://github.com/ValeriiMal/proginmind.io/blob/master/src/pages/articles/2019-03-01---Layering-Of-Application/index.md"}}},"pageContext":{"slug":"/posts/layering-of-application/"}}