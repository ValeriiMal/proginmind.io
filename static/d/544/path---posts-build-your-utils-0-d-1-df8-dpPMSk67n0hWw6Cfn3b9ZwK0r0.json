{"data":{"site":{"siteMetadata":{"title":"Blog by Valerii Maltsev","subtitle":"\n      all(identity, [Write JavaScript, share knowladge, develop web applications])\n    ","copyright":"","author":{"name":"Valerii Maltsev","twitter":"valeriimaltsev"},"disqusShortname":"","url":"https://proginmind.io"}},"markdownRemark":{"id":"33d5a506-2276-5b99-b493-652212708380","html":"<h2>Prefase</h2>\n<p>This little talk is about how it is important to build your own tools, build wrappers\nfor third party dependencies of the application code. How it is important to isolate your application\ncode from anything else.</p>\n<blockquote>\n<p>“Nobody knows exactly how do you like to use the code, except yourself.” - Me</p>\n</blockquote>\n<p>Your applaction code should contain facades for you dependency’s code. It can be considered as\na rule in a project - ‘use wrapper for dependency’. Doesn’t matter what kind of dependency it is.\nIt can be helper lib to work with arrays and objects or it can be a UI library of components.</p>\n<p>In order to bring some arguments here lets consider regular app’s code that doesn’t use wrappers.\nFirst you decided to use ‘OneUI’ (just example) lib for components like input, select, button etc.\nYou built your several pages and ten forms whick all the way use this components directly imported\nfrom lib module. Then UX designer came and modify your app in the way, that it is easier to choose\nanother ‘TwoUI’ lib in order to support nice UX and performance. Or maybe even write your own\ncomponents. In that point you began to think about hundred of places where you imported old\n‘OneUI’ library and started to imagine how painful it is going to be refactored to new ‘TwoUI’ library.</p>\n<p>Now think about how much it is easier to replace old lib with new one if you just need to update\nyour code in modules that exposes particular components and don’t touch your app’s code? E.g. just\nimport ‘TwoUI’ instead of ‘OneUI’ to Input module and change implementation in one place. This way\nyou can incrementally replace components in your app one by one and not be lost in ‘where\nI can miss to replace components?‘.</p>\n<h2>Making utils</h2>\n<p>For JS utils often used library like lodash or ramda or smth else. And in your app code it can\nbe used like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> <span class=\"token string\">'smth'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">propEq</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So lets use our utils just from here!\nCode, shown above likely often faced in the app in different places. But you can create your\n<code class=\"language-text\">findById</code> util function:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// utils/list.js\n\nimport _ from &#39;ramda&#39;;\n\nconst findById = id =&gt; _.find(_.propEq(&#39;id&#39;, id));</code></pre></div>\n<p><a href=\"https://codesandbox.io/s/wizardly-cohen-9zlfm\">Codesandbox</a></p>\n<p>Feel free to use it everywhere in the app! Now you can not only use it but improve it or extend it.\nThis way it is even make it easy to change the library. Just edit your utils and don’t touch other\napp’s code. Cool!</p>\n<p>The next one I use a lot is mapping smth. For example we often map ids. With direct usage of the lib\nyou can write it like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// app/not-util.js\n\nimport _ from &#39;ramda&#39;;\n\nconst ids = map(prop(&#39;id&#39;), list);</code></pre></div>\n<p>Util it!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// utils/object.js\nimport _ from &#39;ramda&#39;;\n\nconst id = prop(&#39;id&#39;);\n\n// utils/list.js\nimport _ from &#39;ramda&#39;;\nimport { id } from &#39;./object&#39;;\n\nconst mapId = map(id);</code></pre></div>\n<p>The next one I use a lot is filtering items that has ‘nil’ values. With direct usage of the lib\nyou can write it like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// app/not-util.js\n\nimport _ from &#39;ramda&#39;;\n\nconst filtered = _.filter(_.compose(_.not, _.either(_.isNil, _.isEmpty)), list);\n// or\nconst filtered = _.reject(_.either(_.isNil, _.isEmpty)), list); // will filter also zeros which is not ok for some cases\n// or\nconst filtered = _.filter(Boolean), list); // will filter also zeros which is not ok for some cases</code></pre></div>\n<p>So much functions in so frequently used logic! Have to do smth with it. Yeap, right. Make util for\nthat:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// utils/list.js\nimport _ from &#39;ramda&#39;;\n\nconst clear = _.reject(_.either(_.isNil, _.isEmpty));</code></pre></div>\n<p>Here is another ramda’s function <code class=\"language-text\">adjust</code>. What does it do? It applies specific function to\nlist item under specific index.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// app/code.js</span>\n  <span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> adjusted <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// apply first argument to list item under index from second argument</span>\n    _<span class=\"token punctuation\">.</span>inc<span class=\"token punctuation\">,</span> <span class=\"token comment\">// increase input number by 1</span>\n    <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    list<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 2]</span></code></pre></div>\n<p>The main inconvenience for me was that I need to calculate index of the item I want to update.\nIt can be improved by providing your own <code class=\"language-text\">adjustBy</code> function! Look:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// utils/list.js</span>\n  <span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">adjustBy</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>applyF<span class=\"token punctuation\">,</span> findF<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>\n      applyF<span class=\"token punctuation\">,</span>\n      _<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>findF<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// find index of an intem by specific predicate</span>\n      list<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// app/code.js</span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> adjustBy <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/list.js'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> adjusted <span class=\"token operator\">=</span> <span class=\"token function\">adjustBy</span><span class=\"token punctuation\">(</span>\n    <span class=\"token function\">assoc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// set 'id' property to 3</span>\n    <span class=\"token function\">propEq</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// check if item's 'id' property equals 2</span>\n    list<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [{ id: 1 }, { id: 3 }]</span></code></pre></div>\n<p>Now, instead of separately find index and then apply <code class=\"language-text\">adjust</code> function we can do all this steps in\none function call. Cool! One more our own util.</p>\n<p>This way you can create your own domain specific language on top of your host programming language.\nWhat do I mean? Imagine we have an app with cart and items that can be placed in the cart. Now you\nneed to add item to the cart. In the simplest structure it looks like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> cart <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'food'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// add item to the cart and return new cart object (immutability is important =))</span>\n  <span class=\"token keyword\">const</span> newCart <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>cart<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>cart<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ok. I don’t want to write this code twice anywhere in my app code. So I’m going what? Right! Util it!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// utils/cart.js</span>\n  <span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cart<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">assoc</span><span class=\"token punctuation\">(</span><span class=\"token string\">'items'</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> cart<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> cart<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// app/client-code.js</span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> addItem <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/cart.js'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> cart <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'food'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> newCart <span class=\"token operator\">=</span> <span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span>cart<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Not so hard, right? But how exciting!</p>\n<p>You can achieve great readability and maintainability this way but don’t be lazy to do this from\nthe start so you don’t neet to improve your code in the future)</p>\n<p>One more huge positive effect of ‘utiling’ is portability of the code. This days it is common\nto write web and mobile applications for clients, maybe even browser extention.\nAnd the easiest way to reduce time spending on\ndevelopment is to reuse your own code. All utils you built you can now port to different places.\nJust made different repository for all utils have been made and reuse them everywhere you need!\nNow you just need to write platform specific code, which in most cases deals with UI, API calls\nand caching on device side. But at least you can store business logic and utils shareable.</p>\n<p>Lets check what we can ‘util’ when working with React application. There is lot of interesting\nstuff to do! Lets think about most commonly used way we work with JSX and components ‘return null’\nexceptions.</p>\n<ul>\n<li>ternary</li>\n<li>cond</li>\n<li>mapping items in JSX</li>\n<li>early exiting component</li>\n<li>presetup props values</li>\n<li>conditional rendering</li>\n</ul>\n<p>// ------------------------------------------</p>\n<p>function SelectPage () {\nif (logged) {\nreturn (<App />);\n} else {\nreturn (<Login />);\n}\n}</p>\n<p>import _ from ‘ramda’;</p>\n<p>const createElement2 = (Component) => (props) => {\nreturn React.createElement(Component, props);\n};</p>\n<p>// cond - takes arg and run it through sequence of predicates. If predicate saticfied\n// calls second condition’s argument with arg.</p>\n<p>const SelectPage = _.cond([\n[\n_.propEq(‘logged’, true),\ncreateElement2(App),\n],\n[\n_.propEq(‘logged’, false),\ncreateElement2(Login),\n],\n[T, () => null],\n]);</p>\n<p>(\n<SelectPage logged={logged} />\n)</p>\n<p>(\n&#x3C;SelectRender cond={[[logged, App], [!logged, Login]]} />\n)</p>\n<p>// --------------------------------------------</p>\n<p>(\n<Dropdown\n    value={value}\n    onChange={handleChange}\n    selectOnNavigation={false}\n    closeOnSelect={false}\n  />\n)</p>\n<p>const AppDropdown = (props) => {\nreturn (\n&#x3C;Dropdown\n{…props}\nselectOnNavigation={false}\ncloseOnSelect={false}\n/>\n);\n};</p>\n<p>(\n<AppDropdown\n    value={value}\n    onChange={handleChange}\n  />\n)</p>\n<p>const filterProps = (setupProps, Component, options) => {\nconst  { override } = options;\nreturn (props) => {\nlet filteredProps = props;\nif (!override) {\nfilteredProps = omit(keys(setupProps), props);\n}\nreturn (&#x3C;Component {…filteredProps} {…setupProps} />);\n};\n};</p>\n<p>const AppDropdown = filterProps({\nselectOnNavigation: false,}\ncloseOnSelect: false,\n}, Dropdown, { override: true });</p>\n<p>// ---------------------------------------------</p>\n<p>{\n(a &#x3C; b) &#x26;&#x26; (\n<Component />\n)\n}</p>\n<p>{\n(a &#x3C; b) ? (\n<Component />\n) : (\n<Component />\n)\n}</p>\n<p>&#x3C;IfElse case={a &#x3C; b}>\n<Component />\n</IfElse></p>\n<p><IfElse case={a > b}>\n&#x3C;IfElse.T>\n<Component />\n&#x3C;/IfElse.T>\n&#x3C;IfElse.F>\n<Component />\n&#x3C;/IfElse.T>\n</IfElse></p>\n<p>// -----------------------------------------------</p>\n<p>{list.map((item) => item)}</p>\n<p><Map>{list}</Map></p>\n<p>// --------------------------------------------------</p>\n<p>{list.map((item) => <Component title={item} />)}</p>\n<p><Map component={Component} prop=\"title\">{list}</Map></p>\n<p>// --------------------------------------------------</p>\n<p>{list.map((item) => <Component title={item.name} />)}</p>\n<p>&#x3C;Map\ncomponent={Component}\nprops={(item) => ({ title: item.name })}</p>\n<blockquote>\n<p>  {list}\n</Map></p>\n</blockquote>\n<p>// --------------------------------------------------</p>\n<p>(\na > b\n? a\n: b\n)</p>\n<p>(\na > b &#x26;&#x26; a\n)</p>\n<p>(\na > b &#x26;&#x26; b\n)</p>\n<p>&#x3C;IfElse\ntruthy={a}\nfalsy={b}</p>\n<blockquote>\n<p>  {a > b}\n</IfElse></p>\n</blockquote>\n<h3>Testing</h3>\n<p>One more positiv argument to build utils is certanity that your code is still working fine after\nreplacing something because tests are successfully passed. Lets consider one little case.</p>\n<p>Take into consideration <code class=\"language-text\">mapId</code> function that we built earlier. It uses <code class=\"language-text\">map</code> and <code class=\"language-text\">prop</code> functions\nfrom <code class=\"language-text\">ramda</code>. It is not so likely but maybe you want to replace <code class=\"language-text\">ramda</code>’s <code class=\"language-text\">map</code> with <code class=\"language-text\">lodash</code>’s <code class=\"language-text\">map</code>.\nThe second one takes array argument as a first parameter. It means that our <code class=\"language-text\">mapId</code> function will\nbe broken. We can quickly make test for it and check it once we made a change to an implementation.\nWith <code class=\"language-text\">lodash</code> it can be reimplemented like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> map <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash.map'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapId</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Thats it. Now all your app code that uses this function will receive updated implementation of the\n<code class=\"language-text\">mapId</code> function. It was very easy to test and change because of our wrapper for <code class=\"language-text\">ramda</code> and <code class=\"language-text\">lodash</code>\nlibraries.</p>\n<h3>Conclusion</h3>\n<p>Imagine your app code as three layers of dependencies:</p>\n<ol>\n<li>application code itself</li>\n<li>your utils and tools, wrappers for third party code</li>\n<li>third party code itself</li>\n</ol>\n<p>This approach will make you happier to use your utils and to bring more certanity how it works and\nhow it can be improved, how third party code can be replaced without pain.</p>\n<p>Enjoy coding!</p>","fields":{"tagSlugs":["/tags/javascript/","/tags/web/","/tags/architecture/"]},"frontmatter":{"title":"Build your own utils","tags":["Javascript","Web","Architecture"],"date":"2019-12-29T16:51:00.000Z","description":"Only you the one who knows how you like to use the code","twitter":null,"github":null}}},"pageContext":{"slug":"/posts/build-your-utils/"}}