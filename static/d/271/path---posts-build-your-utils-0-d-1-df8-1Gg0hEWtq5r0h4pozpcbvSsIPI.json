{"data":{"site":{"siteMetadata":{"title":"Blog by Valerii Maltsev","subtitle":"\n      all(identity, [Write JavaScript, share knowladge, develop web applications])\n    ","copyright":"","author":{"name":"Valerii Maltsev","twitter":"valeriimaltsev"},"disqusShortname":"","url":"https://proginmind.io"}},"markdownRemark":{"id":"33d5a506-2276-5b99-b493-652212708380","html":"<h2>Preface</h2>\n<p>This little talk is about how it is important to build your own tools, build wrappers\nfor third party dependencies of the application code. How it is important to isolate your application\ncode from anything else.</p>\n<blockquote>\n<p>“Nobody knows exactly how do you like to use the code, except yourself.” - Me</p>\n</blockquote>\n<p>Your applaction code should contain facades for you dependency’s code. It can be considered as\na rule in a project - ‘use wrapper for dependency’. Doesn’t matter what kind of dependency it is.\nIt can be helper library to work with arrays and objects or it can be a UI library of components.</p>\n<p>In order to bring some arguments here lets consider regular app’s code that doesn’t use wrappers.\nFirst you decided to use ‘OneUI’ (just example) library for components like input, select, button etc.\nYou built several pages and ten forms which all the way use this components directly imported\nfrom ‘OneUI’ module. Then UX designer came and modify your app in the way, that it is easier to choose\nanother ‘TwoUI’ lib in order to support nice UX and performance. Or maybe even write your own\ncomponents. In that point you began to think about hundred of places where you imported old\n‘OneUI’ library and started to imagine how painful it is going to be reimplementing all components with new ‘TwoUI’ library.</p>\n<p>Now think about how much it is easier to replace old library with new one if you just need to update\nyour code in modules that expose particular components and don’t touch your application code? E.g. just\nimport ‘TwoUI’ instead of ‘OneUI’ to Input module and change implementation in one place. This way\nyou can incrementally replace components in your app one by one and not be lost in ‘where I can miss to replace components?‘.</p>\n<h2>Making utils</h2>\n<p>There is a bunch of code that involved in data processing. E.g. traversing lists of data, mutating / creating objects. Often for\nthat purpose developers use third party libraries like <a href=\"https://lodash.com/\">lodash</a> or <a href=\"https://ramdajs.com/\">ramda</a> or smth else.</p>\n<p>Through the article I’m using examples with <code class=\"language-text\">ramda</code> just because I’m using it a lot in my day to day coding. The thing that it is more suitable for functional programming is another\ntopic which I think I’ll cover soon. So for purpose of exposing\nmain ideas in the current article I’ll add brief descriptions\nto some <code class=\"language-text\">ramda</code> code.</p>\n<p>In your application finding an item by specific id can look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> found <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// check if specific predicate returns True for input item, and return that item</span>\n  _<span class=\"token punctuation\">.</span><span class=\"token function\">propEq</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'specific id to look up'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// accept property name, property value and an object which should be checked</span>\n  list<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If you are not familiar with <code class=\"language-text\">partial function application</code> then\ncheck how previous code snipped could look without it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> found <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> _<span class=\"token punctuation\">.</span><span class=\"token function\">propEq</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'specific id to look up'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  list<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Partial application</code> is one of the fundamental tool that makes\nfunctional programming possible with JavaScript. If you interested check <a href=\"https://fr.umio.us/favoring-curry/\">this one</a>. But there we won’t cover it in details. I’ll use such examples\nin the article just because it looks better, without characters that decrease readability =)</p>\n<p>So lets make our utils right from here!\nCode, shown above likely often faced in the application in different places. But you can create your\n<code class=\"language-text\">findById</code> util function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// utils/list.js</span>\n<span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// findById :: ID -> Array Object -> Object</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">findById</span> <span class=\"token operator\">=</span> id <span class=\"token operator\">=></span> _<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">propEq</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">findById</code> takes value of id, then list where we want to find\nan item and returns item or <code class=\"language-text\">undefined</code> if there is no such item in the list.</p>\n<p><a href=\"https://codesandbox.io/s/wizardly-cohen-9zlfm\">Codesandbox</a></p>\n<p>Feel free to use it everywhere in the app! Now you can not only use it but improve it or extend it.\nThis way it is even make it easy to change the third party library. Just edit your utils and don’t touch other\napp’s code. Cool!</p>\n<p>The next one I’ve used a lot is mapping lists. For example we often map list to make list of ids from list of objects. With direct usage of library you can write it like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// app/code.js</span>\n<span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> ids <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Lets “util” it!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// utils/object.js</span>\n<span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Get \"id\" from object.\n * @example\n * const objId = id(obj);\n */</span>\n<span class=\"token keyword\">const</span> id <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// takes property name and object, return property value</span>\n\n<span class=\"token comment\">// utils/list.js</span>\n<span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./object'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> mapId <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// apply specific function to every item of the list, passed as a second argument</span></code></pre></div>\n<p>The next one I’ve used a lot is filtering items that has <code class=\"language-text\">undefined</code> or <code class=\"language-text\">null</code> values. With direct usage of the library\nyou can write it like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// app/code.js</span>\n\n<span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> filtered <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token comment\">// takes predicate and return new list with items that sutisfied this predicate</span>\n  _<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// just make one function from other ones</span>\n    _<span class=\"token punctuation\">.</span><span class=\"token function\">either</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// return True if at least one of args return True</span>\n      _<span class=\"token punctuation\">.</span>isNil<span class=\"token punctuation\">,</span> <span class=\"token comment\">// check if value is undefined or null</span>\n      _<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">,</span> <span class=\"token comment\">// check if value is empty, e.g. \"\" or [] or {}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _<span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">,</span> <span class=\"token comment\">// reverce True to False and vise versa</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  list<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword\">const</span> filtered <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// opposed to filter</span>\n  _<span class=\"token punctuation\">.</span><span class=\"token function\">either</span><span class=\"token punctuation\">(</span>\n    _<span class=\"token punctuation\">.</span>isNil<span class=\"token punctuation\">,</span>\n    _<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  list<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// or</span>\n<span class=\"token keyword\">const</span> filtered <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>Boolean<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// will filter also zeros which is not ok for some cases</span></code></pre></div>\n<p>There is first filter function without third party library just to get you an idea how it works:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// app/code.js</span>\n\n<span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> filtered <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token comment\">// takes predicate and return new list with items that sutisfied this predicate</span>\n  <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> invalid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n      item <span class=\"token operator\">===</span> undefined\n      <span class=\"token operator\">||</span> item <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span>\n      <span class=\"token operator\">||</span> item<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n      <span class=\"token operator\">||</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n      <span class=\"token operator\">||</span> item <span class=\"token operator\">===</span> <span class=\"token string\">''</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>invalid<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  list<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>So much functions in so frequently used logic! Have to do smth with it. Yeap, right. Make util for it:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// utils/list.js</span>\n<span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> clear <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">either</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>isNil<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here is another <code class=\"language-text\">ramda</code>’s function <code class=\"language-text\">adjust</code>. What does it do? It applies specific function to list item under specific index.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// app/code.js</span>\n  <span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> index <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=></span> item <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> adjusted <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// apply first argument to list item under index from second argument</span>\n    _<span class=\"token punctuation\">.</span>inc<span class=\"token punctuation\">,</span> <span class=\"token comment\">// increase input number by 1</span>\n    index<span class=\"token punctuation\">,</span>\n    list<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 2]</span></code></pre></div>\n<p>The main inconvenience for me was that I need to calculate index of the item I want to update.\nIt can be improved by providing your own <code class=\"language-text\">adjustBy</code> function! Look:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// utils/list.js</span>\n  <span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">adjustBy</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>applyF<span class=\"token punctuation\">,</span> findF<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>\n      applyF<span class=\"token punctuation\">,</span>\n      _<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span>findF<span class=\"token punctuation\">,</span> list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// find index of an intem by specific predicate</span>\n      list<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// app/code.js</span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> adjustBy <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/list.js'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> adjusted <span class=\"token operator\">=</span> <span class=\"token function\">adjustBy</span><span class=\"token punctuation\">(</span>\n    inc<span class=\"token punctuation\">,</span> <span class=\"token comment\">// set 'id' property to 3</span>\n    _<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// check if item's 'id' property equals 2</span>\n    list<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [2, 2]</span></code></pre></div>\n<p>So neet!</p>\n<p>Now, instead of separately find index and then apply <code class=\"language-text\">adjust</code> function we can do all this steps in\none function call. Cool! One more our own util.</p>\n<p>This way you can create your own domain specific language on top of your host programming language.\nWhat do I mean? Imagine we have an app with cart and items that can be placed in the cart. Now you\nneed to add item to the cart. In the simplest structure it looks like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> cart <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'food'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// add item to the cart and return new cart object (immutability is important =))</span>\n  <span class=\"token keyword\">const</span> newCart <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>cart<span class=\"token punctuation\">,</span> items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>cart<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Ok. I don’t want to write this code twice anywhere in my app code. So I’m going what? Right! Util it!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\">// utils/cart.js</span>\n  <span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cart<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">assoc</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// set property value to object and return new object</span>\n      <span class=\"token string\">'items'</span><span class=\"token punctuation\">,</span>\n      _<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> cart<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// add item to the end of list</span>\n      cart<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// app/code.js</span>\n  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> addItem <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../utils/cart.js'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> cart <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> items<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'food'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> newCart <span class=\"token operator\">=</span> <span class=\"token function\">addItem</span><span class=\"token punctuation\">(</span>cart<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Not so hard, right? But how exciting our code could look like!</p>\n<p>You can achieve great readability and maintainability this way but don’t be lazy to do this from\nthe start, so you don’t neet to improve your code in the future =)</p>\n<p>One more huge positive effect of “utiling” is portability of the code. This days it is common\nto write web and mobile applications for clients, maybe even browser extention.\nAnd the easiest way to reduce time spending on\ndevelopment is to reuse your own code. All utils you built you can now port to different places.\nJust made different repository for all utils have been made and reuse them everywhere!\nAt the end you just need to write platform specific code, which in most cases deals with UI, API calls\nand caching on device side. But at least you can store business logic and utils shareable.</p>\n<p>Lets check what we can “util” when working with React application. There is lot of interesting\nstuff to do! Lets think about most commonly used way we work with JSX and components. Lets cover common case of using ternary operator inside JSX code. For me it is hard to\nread and manipulate if it has lot of JSX. Just for illustration, ternary code can look like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  (a &lt; b) ? (\n    &lt;ComponentForTruthy /&gt;\n  ) : (\n    &lt;ComponentForFalsy /&gt;\n  )\n}</code></pre></div>\n<p>I’d like to replace it with more semantic one. Lets build <code class=\"language-text\">IfElse</code> component.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;IfElse condition={a &gt; b}&gt;\n  &lt;IfElse.T&gt;&lt;ComponentForTruthy /&gt;&lt;/IfElse.T&gt;\n  &lt;IfElse.F&gt;&lt;ComponentForFalsy /&gt;&lt;/IfElse.T&gt;\n&lt;/IfElse&gt;</code></pre></div>\n<p>That will be widely used util for sure.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">IfElse</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> condition<span class=\"token punctuation\">,</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>child<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>condition <span class=\"token operator\">&amp;&amp;</span> child<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> IfElse<span class=\"token punctuation\">.</span><span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> child<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>condition <span class=\"token operator\">&amp;&amp;</span> child<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> IfElse<span class=\"token punctuation\">.</span><span class=\"token constant\">F</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> child<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  IfElse<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">T</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  IfElse<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">F</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> children<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we can use it and even extend it for supporting cases like this (declarative version of <code class=\"language-text\">{ isTruthy &amp;&amp; &lt;Component /&gt; }</code> kind of things):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;IfElse.T condition={a &gt; b}&gt;\n  &lt;ComponentForTruthy /&gt;\n&lt;/IfElse.T&gt;\n\n&lt;IfElse.F condition={a &gt; b}&gt;\n  &lt;ComponentForFalsy /&gt;\n&lt;/IfElse.F&gt;</code></pre></div>\n<p><a href=\"https://codesandbox.io/s/confident-dream-wvghc\">Codesandbox</a></p>\n<h3>Testing</h3>\n<p>One more positiv argument to build utils is certanity that your code is still working fine after\nreplacing something because tests are successfully passed. Lets consider one little case.</p>\n<p>Take into consideration <code class=\"language-text\">mapId</code> function that we built earlier. It uses <code class=\"language-text\">map</code> and <code class=\"language-text\">prop</code> functions\nfrom <code class=\"language-text\">ramda</code>. It is not so likely but maybe you want to replace <code class=\"language-text\">ramda</code>’s <code class=\"language-text\">map</code> with <code class=\"language-text\">lodash</code>’s <code class=\"language-text\">map</code>.\nThe second one takes array argument as a first parameter. It means that our <code class=\"language-text\">mapId</code> function will\nbe broken. We can quickly make test for it and check it once we made a change to an implementation.\nWith <code class=\"language-text\">lodash</code> it can be reimplemented like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'ramda'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> map <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash.map'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapId</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">prop</span><span class=\"token punctuation\">(</span><span class=\"token string\">'id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Thats it. Now all your app code that uses this function will receive updated implementation of the\n<code class=\"language-text\">mapId</code> function. It was very easy to test and change because of our wrapper for <code class=\"language-text\">ramda</code> and <code class=\"language-text\">lodash</code> libraries.</p>\n<p>Ideally all the functions from such library should be exposed through application “util” module. I’m afraid of thinking about\nhow much work it can bring if at some point we decided to change\nthird party library. For example from <code class=\"language-text\">lodash</code> to <code class=\"language-text\">ramda</code>, or from <code class=\"language-text\">OneUI</code> to <code class=\"language-text\">TwoUI</code>. Without special util module we’ll have to change almost all files in the application. But with it, only change of specific util files is required.</p>\n<h3>Conclusion</h3>\n<p>Imagine your app code as three layers of dependencies:</p>\n<ol>\n<li>application code itself</li>\n<li>your utils and tools, wrappers for third party code</li>\n<li>third party code itself</li>\n</ol>\n<p>This approach will make you happier to use your utils and to bring more certanity how it works and\nhow it can be improved, how third party code can be replaced without pain.</p>\n<p>Enjoy coding!</p>","fields":{"tagSlugs":["/tags/javascript/","/tags/web/","/tags/architecture/"]},"frontmatter":{"title":"Build your own utils","tags":["Javascript","Web","Architecture"],"date":"2019-12-29T16:51:00.000Z","description":"Only you the one who knows how you like to use the code","twitter":null,"github":null}}},"pageContext":{"slug":"/posts/build-your-utils/"}}